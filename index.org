#+HUGO_BASE_DIR: ./
#+HUGO_SECTION: posts

#+AUTHOR: Tom Purl

#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

* Helpers
** Build and Deploy
   #+BEGIN_SRC shell :dir /home/tom/gtd/kata-blog
     hugo
     rsync -av --progress public/ blog:/home/public
   #+END_SRC
* Katas                                                     :@katas:
** DONE Fizzbuzz Using Robot Framework                      :robot_framework:
   CLOSED: [2019-10-17 Thu 20:51]
   :PROPERTIES:
   :EXPORT_FILE_NAME: fizzbuzz-robot-framework
   :EXPORT_DATE: 2019-10-17
   :EXPORT_HUGO_MENU: :menu "main"
   :END:
*** Overview
    The first thing I always try to do to learn a new language after writing "hello
    world" is implementing [[http://codingdojo.org/kata/FizzBuzz/][fizzbuzz]]. This wasn't true with the Robot Framework, so I
    thought it would be time to give it a try.

*** My Implementation

   #+INCLUDE: "./code/katas/robot-framework/fizzbuzz.robot" src robot

*** Observations

    The first thing I learned from this exercise was how surprisingly difficult it
    was to evaluate the result of an expression. If I was running this in Python I
    would do something like this:

#+BEGIN_SRC python
  for num in range(1, 101):
      if num % 15 == 0:
          print("fizzbuzz")
      elif num % 3 == 0:
          print("fizz")
      elif num % 5 == 0:
          print("buzz")
      else:
          print(num)
#+END_SRC

    I can evaluate the =num % 3= part within the else statement using Python. But
    here’s what I *can’t* do using the Robot Framework:

 
#+BEGIN_SRC robot
  Run keyword if    Is Mod Zero    ${number}    15   Log to Console    FIZZBUZZ
  ...    ELSE IF    Run keyword and return status    Is Mod Zero    ${number}    3     Log to Console    FIZZ
  …
#+END_SRC


    I’m sure *something* like this is possible without creating a temporary variable
    (and evaluating the =Is Mod Zero= 3 times *every time*) but I’m not quite sure
    what it is.

    The second thing I learned was how easy it was to run a Python one-liner from
    Robot. If that didn’t work then I simply didn’t see how I was going to evaluate a
    modulus from Robot without writing a Python module (for a one-liner).
* Braindump                                                      :@braindump:
** DONE Emacs Cheat Sheet                                         :org:emacs:
   :PROPERTIES:
   :EXPORT_FILE_NAME: EmacsCheatSheet
   :EXPORT_DATE: 2019-10-17
   :EXPORT_HUGO_MENU: :menu "braindump"
   :EXPORT_HUGO_SECTION: bd
   :END:
*** Screen navigation

  - Quit
      - =C-x C-c=
  - Move down a screen
      - =C-v=
  - Move up a screen
      - =M-v=
  - forward one char
      - =C-f=
  - backwards one char
      - =C-b=
  - up one line
      - =C-p=
  - down one line
      - =C-n=
  - forward one word
      - =M-f=
  - Backwards one word
      - =M-b=
  - Move to the other window
      - =C-x o=
  - Move forward one page
      -  =C-v=
  - Move backwards one page
      -  =M-v=
  - Reset page around cursor with it at the center.
      -  =C-l=
  - Move forward one word
      -  =M-f=
  - Move backwards one word
      -  =M-b=
  - Move to the beginning of a line.
      -  =C-a=
  - Move to the beginning of a sentence.
      -  =M-a=
  - Move to the end of a line.
      -  =C-e=
  - Move to the end of a sentence.
      -  =M-e=
  - Move to the beginning of the document
      -  =M-<= - Move
      - Please note that you also need to press the shift key since =<= is above
        the =,= key.
  - Move to the end of the document
      -  =M->= - Move
  -  Show only one window
      -  =C-x 1=
  -  Horizontally split the current window
      -  =C-x 2=
  -  Vertically split the current window
      -  =C-x 3=

  Moving around one line at a time:

  #+BEGIN_EXAMPLE
                        Previous line, C-p
                                :
                                :
  Backward, C-b .... Current cursor position .... Forward, C-f
                                :
                                :
                          Next line, C-n
  #+END_EXAMPLE

**** Emulating Vim's "gg top" Mnemonic

  In Vim when you are in normal mode you can jump to the beginning of a
  document by pressing =gg= and the end by pressing =G=. Here are some
  keybindings for Emacs that are similar:

  #+BEGIN_SRC emacs-lisp :exports code

  (global-set-key (kbd "C-x gg") 'beginning-of-buffer)
  (global-set-key (kbd "C-x G")  'end-of-buffer)

  #+END_SRC
 
*** Search

  - Incremental Search
      - =C-s=
      - To find the next match just keep pressing =C-s=

  - =M-x replace-string=
    - Find and replace on every instance of a string from the cursor position to the end of the document.

*** File Management

  - Creating a new file
      - Find it =(C-x C-f)=
      - Type in the location where you want to save it.
  - Saving a file
      - =C-x C-s=

**** Registers

  Registers are good for quickly storing and finding all kinds of things, but I
  mostly use them to open files that I use a lot. For example, I can put the 
  following in my =.emacs= file:

  #+BEGIN_EXAMPLE
      ; Org index
      (set-register ?i (cons 'file "c:/td/gtd/org/index.org"))
      ; .emacs file
      (set-register ?e (cons 'file "~/.emacs"))
  #+END_EXAMPLE

  …and then open the files like this:
 
  =C-x r j i=

  =C-x r j e= 
**** Recovery

  To recover a file, open it and then type =M-x recover-file=.

*** Text Management

**** Misc

  - Auto wrap a line by adding a carriage return
      - Similar to =gqip= in Vim
      - =M-q=
  - Selecting Text
      - Simply go to the beginning, press =C-Space= and then navigate to the end
        position.
      - This is a lot like a visual select in Vim.

**** Copying And Pasting With The Kill Ring

  =<DEL>= in Emacs parlance means "Backspace", not "Delete". For that,
  they use =<DELETE>=.

  - =<DEL>=
    - Delete the character just before the cursor. Using the =<DEL>= key
      does *not* add the text to the kill ring, so avoid it when you can.
  - =C-d=
    -  Delete the next character after the cursor
  - =M-<DEL>=
    - Kill the word immediately before the cursor
  - =M-d=
    - Kill the next word after the cursor
  - =C-k=
    - Kill from the cursor position to end of line
  - =M-k=
    - Kill to the end of the current sentence
  - =C-w=
    - Kill selected text
  - =C-y=
    - Yanks the last text killed. With Emacs, "yank" means "yank it off
      of the kill ring", *not* "cut" like it does in Vim.  If you kill a
      bunch of text repeatedly, then one yank pastes all of that text
      back.
  - =M-y=
    - Allows you to "cycle through" your kill ring. If the text retured
      by C-y isn't what you want, jus type this until you see the text
      you want.


**** CUA Mode

  CUA Mode allows you to use C-c and C-v when you have selected text. Here’s more
  information:

  - http://www.emacswiki.org/emacs/CuaMode

  …and here’s what I added to me .emacs file:

  #+BEGIN_EXAMPLE
      (cua-mode t)
      (setq cua-auto-tabify-recptangles nil) ;; Don't tabify after rectangle commands
      (transient-mark-mode 1) ;; No region when it is not highlighted
      (setq cua-keep-region-after-copy t) ;; Standard Windows behavior
  #+END_EXAMPLE

*** Editing Search Buffers
    One of my favorite features of Emacs is how easy it is to edit the *results* of a
    search buffer. Here's how you do that in different scenarios.
**** Word Search
     TODO
**** File Name Search
     1. First find the files using =find-name-dired=.
     2. Then use =wdired= to edit the results.
*** Scripting

**** Interrogating A Variable VAles

  If you want to find out the current value of a variable, just type the
  following:

  #+BEGIN_EXAMPLE
      C-h v <var name>
  #+END_EXAMPLE

  For example:

  #+BEGIN_EXAMPLE
      C-h v org-agenda-files
  #+END_EXAMPLE
*** File Encodings
    I can't do it better than Xah :-)
    - http://ergoemacs.org/emacs/emacs_encoding_decoding_faq.html
*** Misc

**** Remove Version Page On Startup

  #+BEGIN_EXAMPLE
      ; http://askubuntu.com/a/4824
      (setq inhibit-startup-screen t)
      (add-hook 'emacs-startup-hook
        (lambda () (delete-other-windows)) t)
  #+END_EXAMPLE

**** Change The Default Web Browser

  This is all I had to add to my =.emacs= file on my Windows 7 machine to
  start using Firefox instead of IE:

  #+BEGIN_EXAMPLE
      (setq browse-url-browser-function 'browse-url-firefox)
  #+END_EXAMPLE

**** Show Line Numbers

  #+BEGIN_EXAMPLE
      M-x linum-mode
  #+END_EXAMPLE

**** Toggle Word Wrap

  This is similar to the =:set nowrap= command in Vim, except it toggles
  the option:

  #+BEGIN_EXAMPLE

  M-x toggle-truncate-lines

  #+END_EXAMPLE
** DONE Robot Framework Cheat Sheet                   :emacs:robot_framework:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Robot_Framework_Cheat_Sheet
   :EXPORT_DATE: 2019-10-18
   :EXPORT_HUGO_MENU: :menu "braindump"
   :EXPORT_HUGO_SECTION: bd
   :END:
*** Emacs
     Make sure that you create a ctags/etags file so you can use the [[help:robot-mode-find-kw][robot-mode-find-kw]]
     function to jump to a keyword's definition.

     On windows, I had the best luck with the Universal Ctags executable. Here's the
     command that I use at my project's root to generate my tags file for Emacs:

     #+BEGIN_SRC sh
       cd project-root
       ctags.exe -e --langmap="Robot:.robot.txt" -R
     #+END_SRC
*** Debugging
**** General
     This is an excellent reference:

     - https://docs.plone.org/external/plone.app.robotframework/docs/source/debugging.html
**** Dumping All Variable Values
     Use the following keyword to dump all of the existing variables:

     - =Log Variables    level=INFO=

     Please note that the =level= is VERY important. Just choose INFO and you'll see
     everything you care about.
*** Docker-Related Helpers
    This is an excellent tutorial on using Docker with the Robot Framework:

    - https://medium.com/@ypasmk/robot-framework-with-docker-in-less-than-10-minutes-7b86df769c22

    This is really more Chrome and Docker related than Robot Framework related, but
    this is a very promising technique for visually troubleshooting a Robot Framework
    job that is a) driving a web browser and b) running in a Docker container. 

    First start your Docker container that contains Chrome using a command that looks
    something like this:

    #+BEGIN_SRC shell
      docker run --rm -it -p 9222:9222 -v /home/tom/git/robot-code:/home/jenkins/code --entrypoint bash foo/some-chrome-image
    #+END_SRC

    Once you're using the container's interactive shell run this command:

    #+BEGIN_SRC shell
      /usr/bin/google-chrome \
          --disable-gpu --headless --no-sandbox \
          --remote-debugging-address=0.0.0.0 \
          --remote-debugging-port=9222
    #+END_SRC

    Then, on the host machine, visit the following URL in Chrome or Firfox:

    - http://localhost:9222

    ... and then click on the =about:blank= link. 

    You can now see a "window" into the browser running within the container.

    Again, this doesn't have enough wiring to work with Robot Framework yet. That's
    something I still need to figure out. But what I'm *hoping* is that I'll figure
    out a way to watch my Robot Framework tests in a browser while they're running
    withing a Docker container.
** DONE Git Cheatsheet                                                  :git:
   CLOSED: [2019-10-21 Mon 11:57]
   :PROPERTIES:
   :EXPORT_FILE_NAME: GitCheatsheet
   :EXPORT_DATE: 2019-10-18
   :EXPORT_HUGO_MENU: :menu "braindump"
   :EXPORT_HUGO_SECTION: bd
   :END:
*** Cheatsheet

  - Reverting changes to modified files
    - =git reset --hard=
  - Removing a remote branch
    - =git push origin --delete my-branch=

*** Creating A New Remote For A Local Repo

  This process is used when:

  1. You have code on your local machine that is in a git repo.
  2. This code is not currently pushed to a remote.
  3. You want to store a remote on a different filesystem (e.g. a
     directory accessible over NFS or SSH).

  In this example I'm pushing to a shared Windows drive.

  #+BEGIN_SRC ps
    # Navigate to the location of where you want to store your code.
    cd \\some-server\share$\tom\git
    git init --bare dotemacs

    # Now navigate to your repo and push
    cd c:\users\tom\.emacs
    git remote add origin '\\some-server\share$\tom\git\dotemacs'
    git push --set-upstream origin master
    git push origin --mirror
  #+END_SRC

  Now you can backup your repo to a different server and even share your
  code with others who have access to that shared directory.

       - This is a very long line this is a very long line this is a
         very long line this is a
*** View Pull Request Diff From The Command Line
  #+BEGIN_SRC sh
  cd $project
  git checkout $trunk
  git pull
  git checkout $feature_branch
  git pull
  git request-pull dev ./
  # If you want to see the diff contents add the -b flag
  #+END_SRC
*** Convincing Git That a File Isn't Binary
    I have an issue occasionally where =git= thinks that some of my text files are
    binary. Specifically, this seems to happen frequently with my =requirements.txt=
    files. Here's what I've done to fix this.

    Please note that this process still seems a bit black-magicky to me. Some of
    these steps may not be necessary.

    1. In my repository, create a =.gitattributes= files with the following contents:
       1. =*.txt text working-tree-encoding=UTF-16LE eol=CRLF=
       2. I chose this text encoding because it appears to be the default on my
          Windows laptop running emacs.
    2. I set the encoding of my file to =utf-8-dos= in Emacs and saved it.
    3. Commit both files to the =git= repo.
    4. Make another change to the target text file (e.g. =requirements.txt=).

    You should now be able to perform a "text" diff on your files.

** DONE Python Notes                                                 :python:
   CLOSED: [2020-02-12 Wed 10:18]
   :PROPERTIES:
   :EXPORT_FILE_NAME: PythonNotes
   :EXPORT_DATE: 2020-02-11
   :EXPORT_HUGO_MENU: :menu "braindump"
   :EXPORT_HUGO_SECTION: bd
   :END:
   - State "DONE"       from "TODO"       [2020-02-12 Wed 10:18]
*** Toolset
    :PROPERTIES:
    :CUSTOM_ID: toolset
    :END:
  - Emacs
    - [[http://tkf.github.io/emacs-jedi/latest/][jedi.el]]
    - Projectile
    - [[https://www.flycheck.org/en/latest/][flycheck]] (for Emacs)
    - elpy
    - pipenv.el
  - pytest
  - pipenv
  - Multiple terminal windows for the following helpers:
    - ipython
    - git
*** Pipenv
**** Rebuilding a virtual environment
     One of the great things about =pipenv= is that it makes virtual environment
     management relatively brainless. For example, here's how I rebuild a "clean"
     virtual environment:

#+BEGIN_EXAMPLE
# Assuming that you're within the "broken" virtualenv shell
exit
pipenv --rm
pipenv --python <path to python interpreter in your pipfile>
pipenv install
pipenv install --dev
pipenv shell
#+END_EXAMPLE
**** Creating a New Project
     Assuming that your project does not *yet* have a Pipfile, here's how I create
     one:

     #+BEGIN_EXAMPLE
pipenv --python <path to preferred python interpreter>
pipenv install --dev pytest jedi autopep8 yapf flake8
     #+END_EXAMPLE
*** Solving PYTHONPATH Issues
    :PROPERTIES:
    :CUSTOM_ID: solving-pythonpath
    :END:
    I had an issue lately where a Python script in a virtualenv was not
    using the versions of the libraries that were installed in that
    virtualenv. Here's some tips that I learned when debugging the
    issue.
**** Checking The Instance Of Python Being Executed
     :PROPERTIES:
     :CUSTOM_ID: checking-python-instance
     :END:
     First, are you *sure* that you're running the Python executable
     that you think you're running?

     The proper version of Python may not be executed just because
     you're running a script within virtualenv. This is easy to test by
     simply checking the process table. Also, you can try prepending
     your script like this:

     #+BEGIN_SRC sh
       python -m your-script.py
     #+END_SRC

     This was my big mistake the last time I had PYTHONPATH
     issues. After checking the version of Python that was running when
     I executed my script I noticed that it was from a *completely
     different virtualenv*.
**** Checking The Loaded Libraries At Runtime 
     :PROPERTIES:
     :CUSTOM_ID: checking-loaded-libraries-at-runtime
     :END:
     If you'd like to see what libraries are being loaded and from
     where, simply prepend the following to the command that you run to
     execute your Python script:
     #+BEGIN_SRC sh
       python -v -m your-script.py
     #+END_SRC
**** Checking The Library Version In The REPL
     :PROPERTIES:
     :CUSTOM_ID: checking-loaded-libraries-in-repl
     :END:
     Of course, you can also check library versions in the Python REPL
     like so:
     #+BEGIN_SRC sh
       python -c "import robot; print(robot.__version__)"
     #+END_SRC
*** Setting Up A Development Environment On Windows
    :PROPERTIES:
    :CUSTOM_ID: windows-dev
    :END:

  The only tool that changes on Windows is my terminal editor. My
  preference is +Cmder+ Fulent Terminal running a Powershell instance.

  This works pretty well for me but I learned a few lessons when setting
  this up:

**** [[https://github.com/jeffh/sniffer][sniffer]] Isn't Usable on Windows
     :PROPERTIES:
     :CUSTOM_ID: sniffer-on-windows
     :END:

     Sniffer hung for me every time I tried to kill it and it wasn't able to see when
     a file was changed, even after I install =pywin32=.

     I ended up using [[https://docs.pytest.org/en/latest/][py.test]] instead and am very happy with the results.
**** Jedi's A Little Funny
     :PROPERTIES:
     :CUSTOM_ID: funny-jedi
     :END:
  I've had issues starting the jedi server automatically, so I always
  run this command if I'm going to be working on some Python code:

  - =M-x jedi:start-dedicated-server=

*** Emacs Setup
    :PROPERTIES:
    :CUSTOM_ID: emacs
    :END:

    =pipenv= has made things a lot easier to configure Emacs as my Python IDE. Here's
    my config:

    - https://github.com/tompurl/dot-emacs/blob/master/emacs-init.org#python

    As long as I'm using =pipenv= and =pipenv.el= then this configuration is pretty
    darned automatic.
*** TLS Oddities
**** Converting an Encrypted Keypair Into Friendly Formats
     If you want to use client-side TLS with the =requests= library then the easiest
     way to do that is with an unencrypted keypair, with one file for each key. Easy,
     right?

     Welllll I tried doing this 10 different ways with my favorite TLS tool Key Store
     Explorer but just couldn't find the proper format that the =requests= library
     was expecting. Thank goodness I finally found the following:

     - https://github.com/psf/requests/issues/1573#issuecomment-188125157

     Here's my shamelessly copying and pasting it:

***** Generate certificate and private key.
#+BEGIN_EXAMPLE
   // Generate the certificate file.
   openssl pkcs12 -in /path/to/p12cert -nokeys -out certificate.pem
   // Generate private key with passpharse, First enter the password provided with the key and then an arbitrary PEM password //(say: 1234) 
   openssl pkcs12 -in /path/to/p12cert -nocerts -out privkey.pem
#+END_EXAMPLE

   Well, we are not done yet and we need to generate the key that doesn't require the
   PEM password every time it needs to talk to the server.

***** Generate key without passphrase.
 #+BEGIN_EXAMPLE
      // Running this command will prompt for the pem password(1234), on providing which we will obtain the plainkey.pem
      openssl rsa -in privkey.pem -out plainkey.pem
 #+END_EXAMPLE


* Fun                                                                  :@fun:
** Media Log                                             :podcasts:tv:movies:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Media_Log
   :EXPORT_DATE: 10/19/2019
   :EXPORT_HUGO_MENU: :menu "fun"
   :EXPORT_HUGO_SECTION: fun
   :END:
*** Explanation

    I share this stuff because all of the cool kids are doing it 😁

    No really, [[https://tinyletter.com/jenmyers/letters/the-difficult-i-ll-do-right-now-the-impossible-will-take-a-little-while][a lot of people I admire]] keep a public log of all of the
    media they consume, so I thought I might like it too.

*** 2019
**** January
***** 1
****** Gravity Falls, season 2                                           :tv:
***** 12
****** Incredibles 2                                                  :movie:
***** 19
****** Strange Brew                                           :movie:rewatch:
***** 20
****** Back to the future                                     :rewatch:movie:
****** Gamera - MST3K                                                 :movie:
***** 21
****** Gamera vs. Zigra - MST3K                                       :movie:
***** 26
****** Gamera vs Guiron - MST3K                               :rewatch:movie:
****** Hellboy Omnibus Volume 1                                        :book:
***** 27
****** The Pumaman - MST3K                                            :movie:
**** February
***** 3
****** The Amazing Colossal Man/War Of the Colossal Beast - MST3K     :movie:
***** 5
****** Sorry to bother you                                            :movie:
***** 6
****** Doug Stanhope - no place like home                    :comedy:rewatch:
***** 7
****** Last podcast on the left - Josef Mengele series              :podcast:
****** Kyle Kinane - death of the party                      :comedy:rewatch:
***** 9
****** Sturgil Simpson - metamodern sounds in country music   :music:rewatch:
****** Gravity falls, season 2                                   :tv:rewatch:
****** Gravity falls, season 1                                   :rewatch:tv:
***** 17
****** The indestructible man - MST3K                                 :movie:
**** March
***** 1
****** Dana Gould Hour: Potty Mouthery                              :podcast:
****** Brains On: How to cook for an alien                          :podcast:
***** 3
****** Brains On: Boogers and sun sneezes                           :podcast:
***** 5
****** Hot dog taste test                                              :book:
***** 8
****** Say Hi - the wishes and the glitch                     :music:rewatch:
***** 13
****** Baltimore vol 1: the Plague ships                               :book:
***** 23
****** Green River Killer: A True Detective Story                      :book:
***** 26
****** Rise of the black flame                                         :book:
**** April
***** 12
****** Archer - season 9                                                 :tv:
***** 18
****** Preacher - Volume 1                                             :book:
***** 25
****** The Damned United                                              :movie:
**** May
***** 3
****** Shazam!                                                        :movie:
**** August
***** 24
****** Once upon a time in Hollywood                                  :movie:
**** September
***** 19
****** Le Samouraï                                                    :movie:
***** 27
****** Captain America                                                :movie:
***** 28
****** Captain Marvel                                                 :movie:
**** October
***** 7
****** The Last Podcast On The Left - Mormonism Series              :podcast:
***** 12
****** Bill and Ted's Excellent Adventure                     :rewatch:movie:
***** 23
****** Last Podcast on the Left - Men in Black Series       :rewatch:podcast:
***** 24
****** Carnival of Souls                                              :movie:
****** Mulholland Drive                                       :rewatch:movie:
***** 25
****** Freaks                                                 :movie:rewatch:
**** November
***** 1
****** MST3K: Bride of the Monster                                    :movie:
***** 9
****** Joker                                                          :movie:
**** December
***** 7
****** Casey Anthony Series on Last Podcast on the Left     :rewatch:podcast:
***** 13
****** The Murder of Girly Chew Series on Last Podcast on the Left  :podcast:
***** 17
****** Fountain of the World Series on the Cults podcast            :podcast:
***** 23
****** Jon Benet Ramsey Series on Last Podcast on the Left  :rewatch:podcast:
***** 30 
****** Shazam!                                                :rewatch:movie:
****** My Neighbor Totoro                                     :rewatch:movie:
****** H.H Holmes Series on Last Podcast on the Left        :rewatch:podcast:
** Favorite Quotes                                                   :quotes:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Favorite Quotes
   :EXPORT_DATE: 12/31/2019
   :EXPORT_HUGO_MENU: :menu "fun"
   :EXPORT_HUGO_SECTION: fun
   :END:
*** 2019
**** 12/31/2019
     :PROPERTIES:
     :CUSTOM_ID: 12_31_2019
     :END:  
***** Maintainable: Victor Rentea: Never Separate The Refactoring From The Deliverable
        Here's a great quote on software development from
        https://maintainable.fm/episodes/victor-rentea-never-separate-the-refactoring-from-the-deliverable-IWvo_ttQ
        [00:19:11]

        #+BEGIN_QUOTE -r
Never ever ever ever separate the task of refactoring from the task of getting your
feature implemented. You should never put refactoring on any board.
        #+END_QUOTE
***** Sunset Boulevard
      I just loved this Dana Gould quote at 00:06:39 in the [[https://www.patreon.com/posts/pepitone-30708459][Pepitone!]] bonus episode
      of the Dana Gould Hour Podcast:

      #+BEGIN_QUOTE -r
    Sunset boulevard is a billboard-lined sluice gate of cultural diarrhea, but
    sometimes you gotta drive it.
      #+END_QUOTE
***** "Wisconsin Charm" in the 70's
      Henry Zebrowski has dozens if not hundreds of fantastic quotes from the [[https://www.lastpodcastontheleft.com/][Last
      Podcast on the Left]], but as a Chicagoland resident this one really hit home. In
      [[http://traffic.libsyn.com/lpotl/2ce8bef8-1f34-48e5-9357-00ff69ccafce.mp3][part 2 of the John Wayne Gacy]] series the fellas were describing how "charming"
      and popular John Wayne Gacy was, and Henry made this comment at 00:50:32:

      #+BEGIN_QUOTE -r
      I just think he was loud and threw his money around, I think that's just
      Wisconsin Charm (in 1977).
      #+END_QUOTE
**** 9/25/19
     :PROPERTIES:
     :CUSTOM_ID: 9_25_2019
     :END:  
***** John Hodgman On Status and While Male Fragility
      :PROPERTIES:
      :CUSTOM_ID: john_hodgman_fragility
      :END:
      I just finished listening to the [[http://tvguidancecounselor.libsyn.com/tv-guidance-counselor-episode-373-john-hodgman-3-d][John Hodgman interview]] on the [[https://tvguidancecounselor.libsyn.com/][TV Guidance
      Counselor podcast]] and it was one of the most wonderful things that I've listened
      to all year. Not only was it very funny but they talked a lot about while male
      fragility and why that philosophy is so easy to accept for many. Here's my
      favorite quote at [01:01:08]:

      #+BEGIN_QUOTE -r
  What I mean to say is if you know you don't deserve [a status] at some level, then
  you can have a Reckoning with that and try to do good in the world.

  But if that status, whatever it is, is protecting you from some inner oblivion, it's
  very quick [...] to come to the point where your mind then tells you "of *course* I
  deserve this."
      #+END_QUOTE

      On the lighter side, John Hodgman also started one of his stories with this
      statement, which is a masterpiece of silly absurdism:

  #+BEGIN_QUOTE -r
  And I think this is where I was going with the story but this is where I'll go...
  #+END_QUOTE

**** 4/3/2019

  TV Guidance Counselor Podcast: TV Guidance Counselor Episode 354: Emma Dumont http://tvguidancecounselor.libsyn.com/tv-guidance-counselor-episode-354-emma-dumont [01:25:45]

  Here they're discussing "The five thousand fingers of Dr. T" :

  "Those kids movies that are surreal and dark and bizarre are the best because they capture what it feels like to be a kid, which is, everything is a huge deal and life or death and everything is scary and weird."
**** 2/19/19

  https://www.brainpickings.org/2019/02/18/emil-cioran-delusion/

  "People who shut their eyes to reality simply invite their own destruction, and anyone who insists on remaining in a state of innocence long after that innocence is dead turns himself into a monster" 
*** 2018
**** 12/17/2018

  #+BEGIN_QUOTE -r
  You will sometimes hear a certain kind of poet talk about how they have
  learned that energy can never be destroyed. They say how wonderful this is
  because it means that all the energy that people create with their love
  will survive forever. Their soul mate may have died in a tragic banjo accident,
  but the eternal energy of their love will always be with them.
  Except that love is not a phenomenon of energy, but rather a consequence of
  the distribution of energy. It comes about because of patterns and organized
  structures in your brain, built of matter and energy. In other words, love is
  a child of entropy, not energy.
  Those patterns that are love do not have any conservation law backing them up
  the way energy does. They come and go. In fact, the law of increasing entropy
  says that they will go, sooner or later.
  What had been pattern will become void, like a chalk painting washed away by
  the rain - the chalk survives even as it is washed down the drain, but the
  painting is gone.
  Your love and the love of everyone who has ever loved you will be washed away
  in the inevitable, unstoppable, universal flushing down the drain that is the
  fundamental law of increasing entropy. And then the sun will engulf the earth
  and reduce it to ash before shrinking into a white dwarf and dying in obscurity.
  Sorry.
  #+END_QUOTE

**** 4/9/2018
     :PROPERTIES:
     :CUSTOM_ID: 4_9_2018
     :END:

***** "It Was All About Let's Get Wealth"
      :PROPERTIES:
      :CUSTOM_ID: It_Was_All_About_Lets_Get_Wealth
      :END:

  Here's a fantastic set of quotes at 22:34 from [[https://twitter.com/mariabustillos?lang%3Den][Maria Bustillos]] in the
  [[https://trackchanges.postlight.com/decentralized-journalism-a-conversation-with-maria-bustillos-c7f1e276799e][Decentralized Journalism]] episode of the [[https://trackchanges.postlight.com/][Track Changes podcast]]. I feel
  the same about a lot of people who are solely speculators in the Bitcoin
  and Ethereum systems.

  #+BEGIN_QUOTE -r
  "The first time I went to a Bitcoin conference, I was actually so
  horrified that I just went off the whole thing for about a year. I was
  like, I just can't even believe this, it's so insane. [It was] these
  seasteading, libertarian, lunatics everywhere, you know, and I thought
  this is impossible.

  ...

  But you know when I was at that [conference], and it was just all
  about, it was all, the opposite of what motivates me, it was all about
  "let's get wealth, let's get more wealth", and they don't even know
  what they want it for, it's like, just wealth, that's it."
  #+END_QUOTE

***** "Leadership Through Influence"
      :PROPERTIES:
      :CUSTOM_ID: Leadership_Through_Influence
      :END:

  I was at a goodbye party for friend and leader our my church. She did
  a lot of everything and is considered to be a dear friend and leader
  of hundreds of people.

  At one point someone whom I don't know mentioned that my friend is 
  an excellent example of *leadership through influence*. I just think 
  that's the perfect way to describe her style of leadership and I've 
  been thinking about it a lot ever since.

**** 3/28/2018
     :PROPERTIES:
     :CUSTOM_ID: 3_28_2018
     :END:

  This Ralph Waldo Emerson quote was shared with me by my friend Steve
  at work today when talking about standards for standards sake:

  #+BEGIN_QUOTE -r
  “A foolish consistency is the hobgoblin of little minds, adored by
  little statesmen and philosophers and divines. With consistency a
  great soul has simply nothing to do. He may as well concern himself
  with his shadow on the wall. Speak what you think now in hard words,
  and to-morrow speak what to-morrow thinks in hard words again, though
  it contradict every thing you said to-day. — 'Ah, so you shall be sure
  to be misunderstood.' — Is it so bad, then, to be misunderstood?
  Pythagoras was misunderstood, and Socrates, and Jesus, and Luther, and
  Copernicus, and Galileo, and Newton, and every pure and wise spirit
  that ever took flesh. To be great is to be misunderstood.”
  #+END_QUOTE

**** 2/13/2018
     :PROPERTIES:
     :CUSTOM_ID: 2_13_2018
     :END:

  On [[http://mentalpod.com/archives/4724][Episode 368]] of the [[http://mentalpod.com/episodes][The Mental Illness Happy Hour]] podcast Paul
  Gilmartin provides a wonderfully succinct explanation of the
  "depression spiral" at *01:18:41*:

  #+BEGIN_QUOTE -r
  "It's so easy to just sweep shit under the rug and go to our
  addictions and our life gets small, and we isolate, and we just *pile
  on the shame* and then the, the, you know the *compulsive behaviors*
  to try to *numb the shame* and it's a vicious cycle that just pushes
  us closer and closer to the brink, and I've lived it. It's no way to
  live."
  #+END_QUOTE

**** 2/5/2018
     :PROPERTIES:
     :CUSTOM_ID: 2_5_2018
     :END:

  On [[http://mentalpod.com/archives/4715][Episode 366]] of the [[http://mentalpod.com/episodes][The Mental Illness Happy Hour]] podcast Paul
  Gilmartin was discussing how self-improvement often improves your
  relationships with the people that you love with his guest Jen
  Elmquist LMFT. Here's a great quote from Ms. Elmquist at *28:45*:

  #+BEGIN_QUOTE -r
  I think across the board our goal in life should be, to be as great as
  /we can be/ in order to make all of our relationships great. 

  I know that sounds really lofty, but that's satisfaction, right? It's
  when we're relating well with ourselves, others, and the world around us
  we have a better experience and that's good for everybody involved. 
  #+END_QUOTE

*** 2017
**** 07/18/2017
     :PROPERTIES:
     :CUSTOM_ID: 07_18_2017
     :END:

  This is a quote from Tasha Robinson during the [[https://thenextpictureshow.tumblr.com/post/162008521585/new-episode-part-2-of-our-discussion-of-world-war][Pt. 2 - Wonder Woman /
  Paths Of Glory]] episode of the [[https://thenextpictureshow.tumblr.com/][The Next Picture Show]] podcast. She ended
  up really liking Wonder Woman, but here (at 03:41) she describes why
  her expectations were so low:

  #+BEGIN_QUOTE -r

  I think my expectations have been set by how much I've *consistently
  hated* the DC extended universe movies, how many problems I've had with
  them, both just in terms of them all kindof being narratively messy
  and/or, just insensitive to /basic humanity/.

  #+END_QUOTE

  My gripe with these especially bad superhero movies is that Warner
  Brothers seems to be *consistently* making them like this on purpose
  (with Wonder Woman as an exception). It seems bizarre to me that
  someone sits in a room, has an idea to make a movie like Batman V
  Superman, makes it, sees how it turns out, and then says "yes, that's
  great, let's do that again".

**** 3/27/2017
     :PROPERTIES:
     :CUSTOM_ID: 03_27_2017
     :END:

  This is a great digital privacy quote from one of the ACLU panelists
  on the [[https://trackchanges.postlight.com/tech-at-the-aclu-in-practice-and-in-theory-c7b9b85842dd][Tech at the ACLU: In practice, and in theory]] episode of the
  [[https://trackchanges.postlight.com/tagged/podcast][Track Changes podcast]] (at the *16:28* mark):

  #+BEGIN_QUOTE -r

  Digital privacy, and anti-surveillance and anti-censorship [...] while
  we're saying that this is /one/ of the issues that the ACLU covers,
  it's actually related to many, many issues.

  [...]

  And, if we're talking about [...] freedom of religion, if there's
  a Muslim registry that's gonna be built, it's gonna to be built using
  these tools, it's gonna be built using the data that's extracted from
  the surveillance economy.

  #+END_QUOTE

**** 2/7/2017
     :PROPERTIES:
     :CUSTOM_ID: 02_07_2017
     :END:

  George Carlin, from [[http://www.amazon.com/The-Comedians-Thieves-Scoundrels-American/dp/0802123988][The Comedians]] book, about how the responded to all
  of the terrible things that occurred at the end of the sixties:

  #+BEGIN_QUOTE -r

  I didn't respond with rage to any of what was happening
  in 1968. Dr. King's murder in April was depressingly
  predictable. There was a sinking feeling: that something good was
  ebbing away and being encouraged in that direction by its usual
  forces. The establishment was winning -- its war, its assassins, its
  secret government -- and that fact overpowered and debilitated me
  more than it enraged me.

  #+END_QUOTE

**** 1/25/2017
     :PROPERTIES:
     :CUSTOM_ID: 01_25_2017
     :END:

  Tim Bray, from his blog post [[https://www.tbray.org/ongoing/When/201x/2017/01/22/Womens-March][The Women's March]] about the worldwide
  protest of the new Trump administration that occurred the day after
  his inauguration:

  #+BEGIN_QUOTE -r

  I think it's obvious. A bunch of reasonable people, led by women,
  needed to shout out and reassure each other that they weren't crazy
  because they were horrified at a nouveau regime that's crude,
  threatening, ignorant, oligarchic, reactionary, childish, corrupt,
  bigoted, thin-skinned, offensive, and oozes appallingly bad taste.

  #+END_QUOTE

*** 2016
**** 12/16/2016
     :PROPERTIES:
     :CUSTOM_ID: 12_16_2016
     :END:

  This is from the intro to the [[http://www.danagould.com/the-dog-that-caught-the-car/][The Dog That Caught The Car]] episode of
  [[http://www.danagould.com/dgh/][The Dana Gould Hour]] podcast. Dana was referring to the "media
  misinformation bubble" that he lives in:

  #+BEGIN_QUOTE -r

  There are too are too many people in this country talking past each
  other. The internet, which was supposed to unite us, has divided us
  farther. And I am of the belief that the election of someone like
  Donald Trump is in part a direct result of an electorate too far
  ensconced in their own ideological readouts to communicate even the
  simplest disagreements constructively. And that has to stop.

  #+END_QUOTE

**** 12/01/2016
     :PROPERTIES:
     :CUSTOM_ID: 12_01_2016
     :END:

  Cathy O'Neil on the [[https://trackchanges.postlight.com/podcast-39-cathy-oneil-on-weapons-of-math-destruction-ccc7fbcb0b6d#.kr3vhdhaf][Weapons Of Math Destruction]] episode of the [[https://trackchanges.postlight.com/][Track
  Changes]] podcast. Earlier in the podcast she discusses her love of the
  "purity" of math and her disappointment after learning that
  Credit-Default-Swaps were being over-rated by ratings agencies in
  2007 (at *16:57*):

  #+BEGIN_QUOTE -r

  Math wasn't the problem actually. It wasn't that we had the *wrong*
  models, it's that we really don't care...about the truth, that it's
  become a political thing.

  #+END_QUOTE

**** 11/03/2016
     :PROPERTIES:
     :CUSTOM_ID: 11_03_2016
     :END:

  Dana Gould on the [[http://www.danagould.com/the-ghost-mr-halloweenery/][The Ghost & Mr. Halloweenery episode]] of [[http://www.danagould.com/dgh/][The Dana
  Gould Hour]] podcast at *3:16:40* speaking to legendary makeup artist
  Rick Baker on how their "weird little hobbies" have lead to fulfilling
  careers:

  #+BEGIN_QUOTE -r

  The only thing that I've noticed in my storied career is that things
  lead to things, and if you do things and make things, things come of
  it. And if you don't do things and don't make things then things don't
  come of it.

  #+END_QUOTE

  The above quote from Dana Gould also reminds me of the ending of the book
  [[http://goraina.com/books/smile/][Smile]] by Raina Telgemeier:

  #+BEGIN_QUOTE

  My life didn't magically turn perfect after that. I didn't "get the
  guy" as they say. [...] Instead, I threw my passion into things I
  enjoyed, rather than feeling sorry for myself. I realized that I had
  been letting the way I looked on the outside affect how I felt on the
  inside. But the more I focused on my interests, the more it brought
  out things I liked about myself. And that affected the way *other*
  people saw me.

  #+END_QUOTE

  -----

  Joel Hodgson on the [[http://www.danagould.com/the-ghost-mr-halloweenery/][The Ghost & Mr. Halloweenery episode]] of [[http://www.danagould.com/dgh/][The Dana
  Gould Podcast]] at *3:08:31* on why he temporarily retired from show
  business immediately after turning down a lucrative sitcom offer
  (after he'd done Letterman and SNL):

  #+BEGIN_QUOTE -r

  Ultimately at the end of the day all you have to bargain with is
  yourself, and kindof like either I'm gonna do this or I'm not gonna do
  this but you have no real leverage outside of that, and I think, I
  just wasn't feeling it, and I knew that I'd feel bad if I went and did
  this kindof hollow [sitcom role].

  #+END_QUOTE

**** 2/8/2016
     :PROPERTIES:
     :CUSTOM_ID: 02_08_2016
     :END:

  James Baldwin's advice on *why writers write* from [[http://www.amazon.com/Writers-Chapbook-George-Plimpton/dp/0670815659/?tag=braipick-20][The Writer's
  Chapbook]] (via [[https://www.brainpickings.org/2016/02/08/james-baldwin-advice-on-writing/][Brain Pickings]]):

  #+BEGIN_QUOTE -r

  Something that irritates you and won’t let you go. That’s the anguish
  of it. Do this book, or die. You have to go through that. Talent is
  insignificant. I know a lot of talented ruins. Beyond talent lie all
  the usual words: discipline, love, luck, but most of all, endurance.

  #+END_QUOTE

*** 2015
**** 11/27/2015
     :PROPERTIES:
     :CUSTOM_ID: 11_27_2015
     :END:

  Michael Nygard in his [[http://www.michaelnygard.com/blog/2015/10/software-eats-the-world/][Software Eats The World]] article:

  #+BEGIN_QUOTE -r
      Back in 2011, Marc Andreessen said ”[[http://www.wsj.com/articles/SB10001424053111903480904576512250915629460][software is eating the world]]”.
      There’s no reason to think that’s going to slow down soon. And as
      software eats the world, work becomes tech work.
  #+END_QUOTE

**** 08/12/15
     :PROPERTIES:
     :CUSTOM_ID: 08_12_15
     :END:

  Les Orchard, [[http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks][The Verge's Web Sucks]]

  #+BEGIN_QUOTE -r
      "But, is it ultimately a good idea to optimize for these icebergs that
      consist of the tiny bit we came for, perched atop a great big submerged
      intelligence gathering apparatus assembled on-demand from a consortium of
      marketing & analytics firms?"
  #+END_QUOTE

  I have to say that this is my favorite article on technology so far this year.
  I highly recommend it.

**** 08/06/15
     :PROPERTIES:
     :CUSTOM_ID: 08_06_15
     :END:

  Dana Gould, [[https://soundcloud.com/laughspin/just-for-laughs-dana-gould-keynote-address][2015 Just For Laughs Keynote Address]] (15:22):

  #+BEGIN_QUOTE -r
      "We are in a world where everything has been reduced to a competition,
      because in competition there is drama, and drama is compelling and when
      something is compelling people watch it and when people watch it you can sell
      advertising. And if you're not selling something or buying something why the
      fuck are you awake?!? That's why the news is no longer what happened, the
      news is *who won*."
  #+END_QUOTE

**** 07/22/15
     :PROPERTIES:
     :CUSTOM_ID: 07_22_15
     :END:

  Geneva Reed-Veal, [[https://en.wikipedia.org/w/index.php?title%3DDeath_of_Sandra_Bland][Sandra Bland]]'s mother, from her [[http://www.democracynow.org/2015/7/22/i_will_light_you_up_new][daughter's funeral]]
 
  #+BEGIN_QUOTE -r
      "Let’s be for real. That was my baby. She wasn’t my convict. She wasn’t the
      suspect. She was my baby. And it would behoove y’all to think about what you
      all were doing at her age. So some of the stuff that’s in the news is true,
      some of the stuff that’s in the news is not. But the real issue here is
      something occurred that is going to change the world."
  #+END_QUOTE

**** 07/01/15
     :PROPERTIES:
     :CUSTOM_ID: 07_01_15
     :END:

  Gennifer Hutchinson, [[https://twitter.com/GennHutchison/status/616032089423548416][tweet]]

  #+BEGIN_QUOTE -r
      "If you want to make it as a TV writer, don't be a jerk. Make it so people
      want to spend all day in a room with you. Also a good life rule."
  #+END_QUOTE

**** 04/06/15
     :PROPERTIES:
     :CUSTOM_ID: 04_06_15
     :END:

  Gabriel García Márquez, [[http://www.brainpickings.org/2015/04/06/marquez-favorite-books/][Gabriel García Márquez’s Formative Reading List: 24 Books That Shaped One of Humanity’s Greatest Writers]]

  #+BEGIN_QUOTE -r
      "Life is not what one lived, but what one remembers and how one remembers
      it in order to recount it."
  #+END_QUOTE

**** 01/29/15
     :PROPERTIES:
     :CUSTOM_ID: 01_29_15
     :END:

  Louis C K, [[https://louisck.net/purchase/live-at-the-comedy-store][Live At The Comedy Store]]:

  #+BEGIN_QUOTE -r
      "Self love is a good thing, but *self awareness* is more important. You need
      to once in a while go 'uh, I'm kind of an asshole'. You have to have that
      thought once in a while or you're a psychopath."
  #+END_QUOTE

*** 2014
**** 12/7/14
     :PROPERTIES:
     :CUSTOM_ID: 102_7_14
     :END:

  Robert X. Cringely, [[http://www.cringely.com/2014/10/27/fix-ibm/][How To Fix IBM]]:
   
  #+BEGIN_QUOTE -r
      "History has shown that when a company trashes its quality, neglects its
      customers, and makes earnings its only priority – bad things happen. Over the
      last 50 years, the USA has lost many industries this way. If IBM does not get
      serious about quality its survival will be at risk."
  #+END_QUOTE

**** 10/10/14
     :PROPERTIES:
     :CUSTOM_ID: 10_10_14
     :END:

  Kailash Satyarthi regarding his [[http://news-beta.slashdot.org/story/14/10/10/1328236/2014-nobel-peace-prize-awarded-to-kailash-satyarthi-and-malala-yousafzay][fight against child slavery and illiteracy in India]]:

  #+BEGIN_QUOTE -r
      "Satyarthi estimates that 60 million children in India, or 6 percent of the
      population, are forced into work. This, he believes, has nothing to do with
      parental poverty, illiteracy or ignorance. Above all, children are enslaved
      because employers benefit by getting their labour for free or for a pittance."
  #+END_QUOTE

**** 10/03/14
     :PROPERTIES:
     :CUSTOM_ID: 10_03_14
     :END:

  The Jen Meyers Report, [[http://tinyletter.com/jenmyers/letters/maybe-everything-that-dies-someday-comes-back][October 3 2014]]:

  #+BEGIN_QUOTE -r
      Americans may not like to talk about class divisions, but there is at least
      one, and it’s between those who never imagine not getting what they’ve been
      taught they deserve and those who know that no matter what they do, nothing is
      guaranteed.
  #+END_QUOTE

**** 09/10/14
     :PROPERTIES:
     :CUSTOM_ID: 09_10_14
     :END:

  [[http://mentalpod.libsyn.com/episode-188-ask-erika-holmes-mft][Mental Illness Happy Hour -188]], a 
  "Happy Moment" message from a listener name Sherlock (1:47:25):

  #+BEGIN_QUOTE -r
      Don't be afraid of (the) stigma (of mental illness) - fight it. The
      ignorance, denial and prejudice surrounding mental and addictive disorders
      kills people. It's in the news almost daily.
     
      The simplest way to fight it is to seek services. The next step is to be
      open about your own struggles. The next step is to advocate - do what you
      can.
  #+END_QUOTE

**** 08/12/14
     :PROPERTIES:
     :CUSTOM_ID: 08_12_14
     :END:

  Marc Maron from the [[http://www.wtfpod.com/podcast/episodes/remembering_robin_williams][Robin Williams interview]]:

  #+BEGIN_QUOTE -r
      Show business is "A community of bitter people aspiring to something, and
      they're children because what they're aspiring to is ridiculous."
  #+END_QUOTE

**** 07/22/14
     :PROPERTIES:
     :CUSTOM_ID: 07_22_14
     :END:

  This is stolen from [[http://qblog.aaronsw.com][Arron Swartz's quote blog]]:

  [[http://www.nobelprize.org/nobel_prizes/literature/laureates/1950/russell-lecture.html|Bertrand Russell]] 

  #+BEGIN_QUOTE -r
      "The devil has many forms, some designed to deceive the young, some
      designed to deceive the old and serious. If it is the devil that tempts the
      young to enjoy themselves, is it not, perhaps, the same personage that
      persuades the old to condemn their enjoyment? And is not condemnation perhaps
      merely a form of excitement appropriate to old age? And is it not, perhaps, a
      drug which - like opium - has to be taken in continually stronger doses to
      produce the desired effect? Is it not to be feared that, beginning with the
      wickedness of the cinema, we should be led step by step to condemn the opposite
      political party, dagoes, wops, Asiatics, and, in short, everybody except the
      fellow members of our club? And it is from just such condemnations, when
      widespread, that wars proceed. I have never heard of a war that proceeded from
      dance halls."
  #+END_QUOTE

*** ???
**** Wait Wait Don't Tell Me

  #+BEGIN_QUOTE -r
      "After binging for a decade, with money we don't have, President Obama decided
      the only way out of the crisis is to spend almost a trillion dollars we don't
      have either.  This is like curing a hangover by buying a distillery.  The
      Republicans don't like it; they don't like spending money on anything unless it
      blows up, like Iraq, or Merill Lynch."
  #+END_QUOTE
* Presentations                                              :@presentations:
** DONE "Practical Introduction To The Blockchain Using Ethereum" - Presentation
   CLOSED: [2019-10-21 Mon 12:22]
   :PROPERTIES:
   :EXPORT_FILE_NAME: Blockchain_-_First_Steps_Presentation
   :EXPORT_DATE: 3/1/2018
   :EXPORT_HUGO_MENU: :menu "presentations"
   :EXPORT_HUGO_SECTION: presentations
   :END:
     *3/1/18 Update* - I gave this presentation at the [[https://www.meetup.com/foxvalleycp/events/246749490/][2/21/18 meeting]] of the [[https://www.meetup.com/foxvalleycp][Fox
   Valley Computing Professionals]] club. It was a lot of fun with a *great* group
   of people.

   (Seriously, this was only the second time that I attended one of their meetings
   and the other members are really friendly and inclusive, which is something you
   can't always say about a computer club.)

   We spent most of the time talking about [[https://www.cryptokitties.co/][CryptoKitties]], which really shouldn't have
   been that surprising I guess :-)

   -----

   [[https://static.tompurl.com/images/waldo-with-ethereum.png]]

   Do you want to learn more about "the blockchain" but don't know where to start?
   Are you an experiential learner who prefers to learn by doing? And would you
   prefer to learn without spending much money?

   In the presentation below I go over "dipping your toes" into the Ethereum
   blockchain for complete beginners. We cover:

   - Setting up a wallet
   - Buying and managing a cryptocurrency (Ether)
   - Common gotchas

   The goal is to teach you how to fish and "bootstrap" your own process for learning
   about the blockchain. It's easy, fairly inexpensive and very, very educational
   (the process, not the presentation). Also, if you're lucky you can be the first
   kid on your block to own a crypto-collectible.

   Here's the links to the presentation. The HTML version looks the best:

   - [[http://static.tompurl.com/blockchain-first-steps/][HTML Presentation]]

   If you want to see the speaker notes then open the presentation in Chrome and then
   press the "s" button. For more information, see the [[https://github.com/hakimel/reveal.js/#pdf-export][RevealJS documentation]].

   Here's the *printable* versions of presentation:

   - [[http://static.tompurl.com/blockchain-first-steps/slides.pdf][PDF Version]]
   - [[http://static.tompurl.com/blockchain-first-steps/slides-with-speaker-notes.pdf][PDF Version With Speaker Notes]]

   Here's how I print it on my system to conserve paper:

   1. Choose two-sided printing, *long edge*.
   2. Choose the *landscape* orientation.
