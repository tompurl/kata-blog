#+HUGO_BASE_DIR: ./
#+HUGO_SECTION: posts

#+AUTHOR: Tom Purl

#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

* Katas                                                     :@katas:
** DONE Fizzbuzz Using Robot Framework                      :robot_framework:
   CLOSED: [2019-10-17 Thu 20:51]
   :PROPERTIES:
   :EXPORT_FILE_NAME: fizzbuzz-robot-framework
   :EXPORT_DATE: 2019-10-17
   :EXPORT_HUGO_MENU: :menu "main"
   :END:
*** Overview
    The first thing I always try to do to learn a new language after writing "hello
    world" is implementing [[http://codingdojo.org/kata/FizzBuzz/][fizzbuzz]]. This wasn't true with the Robot Framework, so I
    thought it would be time to give it a try.

*** My Implementation

   #+INCLUDE: "./code/katas/robot-framework/fizzbuzz.robot" src robot

*** Observations

    The first thing I learned from this exercise was how surprisingly difficult it
    was to evaluate the result of an expression. If I was running this in Python I
    would do something like this:

#+BEGIN_SRC python
  for num in range(1, 101):
      if num % 15 == 0:
          print("fizzbuzz")
      elif num % 3 == 0:
          print("fizz")
      elif num % 5 == 0:
          print("buzz")
      else:
          print(num)
#+END_SRC

    I can evaluate the =num % 3= part within the else statement using Python. But
    here’s what I *can’t* do using the Robot Framework:

 
#+BEGIN_SRC robot
  Run keyword if    Is Mod Zero    ${number}    15   Log to Console    FIZZBUZZ
  ...    ELSE IF    Run keyword and return status    Is Mod Zero    ${number}    3     Log to Console    FIZZ
  …
#+END_SRC


    I’m sure *something* like this is possible without creating a temporary variable
    (and evaluating the =Is Mod Zero= 3 times *every time*) but I’m not quite sure
    what it is.

    The second thing I learned was how easy it was to run a Python one-liner from
    Robot. If that didn’t work then I simply didn’t see how I was going to evaluate a
    modulus from Robot without writing a Python module (for a one-liner).
* Braindump                                                      :@braindump:
** DONE Emacs Cheat Sheet                                         :org:emacs:
   :PROPERTIES:
   :EXPORT_FILE_NAME: EmacsCheatSheet
   :EXPORT_DATE: 2019-10-17
   :EXPORT_HUGO_MENU: :menu "braindump"
   :EXPORT_HUGO_SECTION: bd
   :END:
*** Screen navigation

  - Quit
      - =C-x C-c=
  - Move down a screen
      - =C-v=
  - Move up a screen
      - =M-v=
  - forward one char
      - =C-f=
  - backwards one char
      - =C-b=
  - up one line
      - =C-p=
  - down one line
      - =C-n=
  - forward one word
      - =M-f=
  - Backwards one word
      - =M-b=
  - Move to the other window
      - =C-x o=
  - Move forward one page
      -  =C-v=
  - Move backwards one page
      -  =M-v=
  - Reset page around cursor with it at the center.
      -  =C-l=
  - Move forward one word
      -  =M-f=
  - Move backwards one word
      -  =M-b=
  - Move to the beginning of a line.
      -  =C-a=
  - Move to the beginning of a sentence.
      -  =M-a=
  - Move to the end of a line.
      -  =C-e=
  - Move to the end of a sentence.
      -  =M-e=
  - Move to the beginning of the document
      -  =M-<= - Move
      - Please note that you also need to press the shift key since =<= is above
        the =,= key.
  - Move to the end of the document
      -  =M->= - Move
  -  Show only one window
      -  =C-x 1=
  -  Horizontally split the current window
      -  =C-x 2=
  -  Vertically split the current window
      -  =C-x 3=

  Moving around one line at a time:

  #+BEGIN_EXAMPLE
                        Previous line, C-p
                                :
                                :
  Backward, C-b .... Current cursor position .... Forward, C-f
                                :
                                :
                          Next line, C-n
  #+END_EXAMPLE

**** Emulating Vim's "gg top" Mnemonic

  In Vim when you are in normal mode you can jump to the beginning of a
  document by pressing =gg= and the end by pressing =G=. Here are some
  keybindings for Emacs that are similar:

  #+BEGIN_SRC emacs-lisp :exports code

  (global-set-key (kbd "C-x gg") 'beginning-of-buffer)
  (global-set-key (kbd "C-x G")  'end-of-buffer)

  #+END_SRC
 
*** Search

  - Incremental Search
      - =C-s=
      - To find the next match just keep pressing =C-s=

  - =M-x replace-string=
    - Find and replace on every instance of a string from the cursor position to the end of the document.

*** File Management

  - Creating a new file
      - Find it =(C-x C-f)=
      - Type in the location where you want to save it.
  - Saving a file
      - =C-x C-s=

**** Registers

  Registers are good for quickly storing and finding all kinds of things, but I
  mostly use them to open files that I use a lot. For example, I can put the 
  following in my =.emacs= file:

  #+BEGIN_EXAMPLE
      ; Org index
      (set-register ?i (cons 'file "c:/td/gtd/org/index.org"))
      ; .emacs file
      (set-register ?e (cons 'file "~/.emacs"))
  #+END_EXAMPLE

  …and then open the files like this:
 
  =C-x r j i=

  =C-x r j e= 
**** Recovery

  To recover a file, open it and then type =M-x recover-file=.

*** Text Management

**** Misc

  - Auto wrap a line by adding a carriage return
      - Similar to =gqip= in Vim
      - =M-q=
  - Selecting Text
      - Simply go to the beginning, press =C-Space= and then navigate to the end
        position.
      - This is a lot like a visual select in Vim.

**** Copying And Pasting With The Kill Ring

  =<DEL>= in Emacs parlance means "Backspace", not "Delete". For that,
  they use =<DELETE>=.

  - =<DEL>=
    - Delete the character just before the cursor. Using the =<DEL>= key
      does *not* add the text to the kill ring, so avoid it when you can.
  - =C-d=
    -  Delete the next character after the cursor
  - =M-<DEL>=
    - Kill the word immediately before the cursor
  - =M-d=
    - Kill the next word after the cursor
  - =C-k=
    - Kill from the cursor position to end of line
  - =M-k=
    - Kill to the end of the current sentence
  - =C-w=
    - Kill selected text
  - =C-y=
    - Yanks the last text killed. With Emacs, "yank" means "yank it off
      of the kill ring", *not* "cut" like it does in Vim.  If you kill a
      bunch of text repeatedly, then one yank pastes all of that text
      back.
  - =M-y=
    - Allows you to "cycle through" your kill ring. If the text retured
      by C-y isn't what you want, jus type this until you see the text
      you want.


**** CUA Mode

  CUA Mode allows you to use C-c and C-v when you have selected text. Here’s more
  information:

  - http://www.emacswiki.org/emacs/CuaMode

  …and here’s what I added to me .emacs file:

  #+BEGIN_EXAMPLE
      (cua-mode t)
      (setq cua-auto-tabify-recptangles nil) ;; Don't tabify after rectangle commands
      (transient-mark-mode 1) ;; No region when it is not highlighted
      (setq cua-keep-region-after-copy t) ;; Standard Windows behavior
  #+END_EXAMPLE

*** Editing Search Buffers
    One of my favorite features of Emacs is how easy it is to edit the *results* of a
    search buffer. Here's how you do that in different scenarios.
**** Word Search
     TODO
**** File Name Search
     1. First find the files using =find-name-dired=.
     2. Then use =wdired= to edit the results.
*** Scripting

**** Interrogating A Variable VAles

  If you want to find out the current value of a variable, just type the
  following:

  #+BEGIN_EXAMPLE
      C-h v <var name>
  #+END_EXAMPLE

  For example:

  #+BEGIN_EXAMPLE
      C-h v org-agenda-files
  #+END_EXAMPLE
*** File Encodings
    I can't do it better than Xah :-)
    - http://ergoemacs.org/emacs/emacs_encoding_decoding_faq.html
*** Misc

**** Remove Version Page On Startup

  #+BEGIN_EXAMPLE
      ; http://askubuntu.com/a/4824
      (setq inhibit-startup-screen t)
      (add-hook 'emacs-startup-hook
        (lambda () (delete-other-windows)) t)
  #+END_EXAMPLE

**** Change The Default Web Browser

  This is all I had to add to my =.emacs= file on my Windows 7 machine to
  start using Firefox instead of IE:

  #+BEGIN_EXAMPLE
      (setq browse-url-browser-function 'browse-url-firefox)
  #+END_EXAMPLE

**** Show Line Numbers

  #+BEGIN_EXAMPLE
      M-x linum-mode
  #+END_EXAMPLE

**** Toggle Word Wrap

  This is similar to the =:set nowrap= command in Vim, except it toggles
  the option:

  #+BEGIN_EXAMPLE

  M-x toggle-truncate-lines

  #+END_EXAMPLE
** DONE Robot Framework Cheat Sheet                   :emacs:robot_framework:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Robot_Framework_Cheat_Sheet
   :EXPORT_DATE: 2019-10-18
   :EXPORT_HUGO_MENU: :menu "braindump"
   :EXPORT_HUGO_SECTION: bd
   :END:
*** Emacs
     Make sure that you create a ctags/etags file so you can use the [[help:robot-mode-find-kw][robot-mode-find-kw]]
     function to jump to a keyword's definition.

     On windows, I had the best luck with the Universal Ctags executable. Here's the
     command that I use at my project's root to generate my tags file for Emacs:

     #+BEGIN_SRC sh
       cd project-root
       ctags.exe -e --langmap="Robot:.robot.txt" -R
     #+END_SRC
*** Debugging
**** General
     This is an excellent reference:

     - https://docs.plone.org/external/plone.app.robotframework/docs/source/debugging.html
**** Dumping All Variable Values
     Use the following keyword to dump all of the existing variables:

     - =Log Variables    level=INFO=

     Please note that the =level= is VERY important. Just choose INFO and you'll see
     everything you care about.
** DONE Git Cheatsheet                                                  :git:
   CLOSED: [2019-10-21 Mon 11:57]
   :PROPERTIES:
   :EXPORT_FILE_NAME: GitCheatsheet
   :EXPORT_DATE: 2019-10-18
   :EXPORT_HUGO_MENU: :menu "braindump"
   :EXPORT_HUGO_SECTION: bd
   :END:
*** Cheatsheet

  - Reverting changes to modified files
    - =git reset --hard=
  - Removing a remote branch
    - =git push origin --delete my-branch=

*** Creating A New Remote For A Local Repo

  This process is used when:

  1. You have code on your local machine that is in a git repo.
  2. This code is not currently pushed to a remote.
  3. You want to store a remote on a different filesystem (e.g. a
     directory accessible over NFS or SSH).

  In this example I'm pushing to a shared Windows drive.

  #+BEGIN_SRC ps
    # Navigate to the location of where you want to store your code.
    cd \\some-server\share$\tom\git
    git init --bare dotemacs

    # Now navigate to your repo and push
    cd c:\users\tom\.emacs
    git remote add origin '\\some-server\share$\tom\git\dotemacs'
    git push --set-upstream origin master
    git push origin --mirror
  #+END_SRC

  Now you can backup your repo to a different server and even share your
  code with others who have access to that shared directory.

       - This is a very long line this is a very long line this is a
         very long line this is a
*** View Pull Request Diff From The Command Line
  #+BEGIN_SRC sh
  cd $project
  git checkout $trunk
  git pull
  git checkout $feature_branch
  git pull
  git request-pull dev ./
  # If you want to see the diff contents add the -b flag
  #+END_SRC
*** Convincing Git That a File Isn't Binary
    I have an issue occasionally where =git= thinks that some of my text files are
    binary. Specifically, this seems to happen frequently with my =requirements.txt=
    files. Here's what I've done to fix this.

    Please note that this process still seems a bit black-magicky to me. Some of
    these steps may not be necessary.

    1. In my repository, create a =.gitattributes= files with the following contents:
       1. =*.txt text working-tree-encoding=UTF-16LE eol=CRLF=
       2. I chose this text encoding because it appears to be the default on my
          Windows laptop running emacs.
    2. I set the encoding of my file to =utf-8-dos= in Emacs and saved it.
    3. Commit both files to the =git= repo.
    4. Make another change to the target text file (e.g. =requirements.txt=).

    You should now be able to perform a "text" diff on your files.

* Fun                                                                  :@fun:
** Media Log                                             :podcasts:tv:movies:
   :PROPERTIES:
   :EXPORT_FILE_NAME: Media_Log
   :EXPORT_DATE: 10/19/2019
   :EXPORT_HUGO_MENU: :menu "fun"
   :EXPORT_HUGO_SECTION: fun
   :END:
*** Explanation

    I share this stuff because all of the cool kids are doing it 😁

    No really, [[https://tinyletter.com/jenmyers/letters/the-difficult-i-ll-do-right-now-the-impossible-will-take-a-little-while][a lot of people I admire]] keep a public log of all of the
    media they consume, so I thought I might like it too.

*** 2019
**** January
***** 1
****** Gravity Falls, season 2                                           :tv:
***** 12
****** Incredibles 2                                                  :movie:
***** 19
****** Strange Brew                                           :movie:rewatch:
***** 20
****** Back to the future                                     :rewatch:movie:
****** Gamera - MST3K                                                 :movie:
***** 21
****** Gamera vs. Zigra - MST3K                                       :movie:
***** 26
****** Gamera vs Guiron - MST3K                               :rewatch:movie:
****** Hellboy Omnibus Volume 1                                        :book:
***** 27
****** The Pumaman - MST3K                                            :movie:
**** February
***** 3
****** The Amazing Colossal Man/War Of the Colossal Beast - MST3K     :movie:
***** 5
****** Sorry to bother you                                            :movie:
***** 6
****** Doug Stanhope - no place like home                    :comedy:rewatch:
***** 7
****** Last podcast on the left - Josef Mengele series              :podcast:
****** Kyle Kinane - death of the party                      :comedy:rewatch:
***** 9
****** Sturgil Simpson - metamodern sounds in country music   :music:rewatch:
****** Gravity falls, season 2                                   :tv:rewatch:
****** Gravity falls, season 1                                   :rewatch:tv:
***** 17
****** The indestructible man - MST3K                                 :movie:
**** March
***** 1
****** Dana Gould Hour: Potty Mouthery                              :podcast:
****** Brains On: How to cook for an alien                          :podcast:
***** 3
****** Brains On: Boogers and sun sneezes                           :podcast:
***** 5
****** Hot dog taste test                                              :book:
***** 8
****** Say Hi - the wishes and the glitch                     :music:rewatch:
***** 13
****** Baltimore vol 1: the Plague ships                               :book:
***** 23
****** Green River Killer: A True Detective Story                      :book:
***** 26
****** Rise of the black flame                                         :book:
**** April
***** 12
****** Archer - season 9                                                 :tv:
***** 18
****** Preacher - Volume 1                                             :book:
***** 25
****** The Damned United                                              :movie:
**** May
***** 3
****** Shazam!                                                        :movie:
**** August
***** 24
****** Once upon a time in Hollywood                                  :movie:
**** September
***** 19
****** Le Samouraï                                                    :movie:
***** 27
****** Captain America                                                :movie:
***** 28
****** Captain Marvel                                                 :movie:
**** October
***** 7
****** The Last Podcast On The Left - Mormonism Series              :podcast:
***** 12
****** Bill and Ted's Excellent Adventure                     :rewatch:movie:
***** 23
****** Last Podcast on the Left - Men in Black Series       :rewatch:podcast:
***** 24
****** Carnival of Souls                                              :movie:
****** Mulholland Drive                                       :rewatch:movie:
***** 25
****** Freaks                                                 :movie:rewatch:
**** November
***** 1
****** MST3K: Bride of the Monster                                    :movie:
* Presentations                                              :@presentations:
** DONE "Practical Introduction To The Blockchain Using Ethereum" - Presentation
   CLOSED: [2019-10-21 Mon 12:22]
   :PROPERTIES:
   :EXPORT_FILE_NAME: Blockchain_-_First_Steps_Presentation
   :EXPORT_DATE: 3/1/2018
   :EXPORT_HUGO_MENU: :menu "presentations"
   :EXPORT_HUGO_SECTION: presentations
   :END:
     *3/1/18 Update* - I gave this presentation at the [[https://www.meetup.com/foxvalleycp/events/246749490/][2/21/18 meeting]] of the [[https://www.meetup.com/foxvalleycp][Fox
   Valley Computing Professionals]] club. It was a lot of fun with a *great* group
   of people.

   (Seriously, this was only the second time that I attended one of their meetings
   and the other members are really friendly and inclusive, which is something you
   can't always say about a computer club.)

   We spent most of the time talking about [[https://www.cryptokitties.co/][CryptoKitties]], which really shouldn't have
   been that surprising I guess :-)

   -----

   [[https://static.tompurl.com/images/waldo-with-ethereum.png]]

   Do you want to learn more about "the blockchain" but don't know where to start?
   Are you an experiential learner who prefers to learn by doing? And would you
   prefer to learn without spending much money?

   In the presentation below I go over "dipping your toes" into the Ethereum
   blockchain for complete beginners. We cover:

   - Setting up a wallet
   - Buying and managing a cryptocurrency (Ether)
   - Common gotchas

   The goal is to teach you how to fish and "bootstrap" your own process for learning
   about the blockchain. It's easy, fairly inexpensive and very, very educational
   (the process, not the presentation). Also, if you're lucky you can be the first
   kid on your block to own a crypto-collectible.

   Here's the links to the presentation. The HTML version looks the best:

   - [[http://static.tompurl.com/blockchain-first-steps/][HTML Presentation]]

   If you want to see the speaker notes then open the presentation in Chrome and then
   press the "s" button. For more information, see the [[https://github.com/hakimel/reveal.js/#pdf-export][RevealJS documentation]].

   Here's the *printable* versions of presentation:

   - [[http://static.tompurl.com/blockchain-first-steps/slides.pdf][PDF Version]]
   - [[http://static.tompurl.com/blockchain-first-steps/slides-with-speaker-notes.pdf][PDF Version With Speaker Notes]]

   Here's how I print it on my system to conserve paper:

   1. Choose two-sided printing, *long edge*.
   2. Choose the *landscape* orientation.
